{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"我的第一篇文章","slug":"我的第一篇文章","date":"2024-11-11T12:28:08.000Z","updated":"2024-11-11T13:46:04.447Z","comments":true,"path":"2024/11/11/我的第一篇文章/","permalink":"http://example.com/2024/11/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/","excerpt":"","text":"利用C11模拟伪闭包实现session的生命周期tips: std::map中的键值对元素由key和value两部分组成, map中的值自动按key排序, 如在下列代码中key为string类型的, 而value为一个智能指针。 1std::map&lt;std::string, std::shared_ptr&lt;Session&gt;&gt; _sessions; 构造伪闭包的思路 利用智能指针被复制和使用引用计数加一的原理保证内存不会被回收 -&gt; bind操作可以将值绑定在一个函数对象上生成新的函数对象, 如果将智能指针作为参数绑定给函数对象, 那么智能指针就能以值的方式被新的函数对象使用, 那么智能指针的生命周期就和新的函数对象一样, 从而达到延长生命周期的效果。 以HandleWrite举例, 在bind时传递__self_shared指针增加引用次数, 这样_self_shared智能指针的引用周期就和async_write第二个参数(也就是asio要求的回调函数对象)的生命周期一致了。 123456789101112131415void CSession::HandleWrite(const boost::system::error_code&amp; error, shared_ptr&lt;CSession&gt; _self_shared) &#123; if (!error) &#123; std::lock_guard&lt;std::mutex&gt; lock(_send_lock); _send_que.pop(); if (!_send_que.empty()) &#123; auto &amp;msgnode = _send_que.front(); boost::asio::async_write(_socket, boost::asio::buffer(msgnode-&gt;_data, msgnode-&gt;_max_len), std::bind(&amp;CSession::HandleWrite, this, std::placeholders::_1, _self_shared)); &#125; &#125; else &#123; std::cout &lt;&lt; &quot;handle write failed, error is &quot; &lt;&lt; error.what() &lt;&lt; endl; _server-&gt;ClearSession(_uuid); &#125;&#125; 除此之外，我们也要在第一次绑定读写回调函数的时候传入智能指针的值,但是要注意传入的方式，不能用两个智能指针管理同一块内存, 以下是错误用法; 12345void CSession::Start()&#123; memset(_data, 0, MAX_LENGTH); _socket.async_read_some(boost::asio::buffer(_data, MAX_LENGTH), std::bind(&amp;CSession::HandleRead, this, std::placeholders::_1, std::placeholders::_2, shared_ptr&lt;CSession&gt;(this)));&#125; shared_ptr(this)生成的新智能指针和this之前绑定的智能指针并不共享引用计数, 所以要使用shared_from_this()函数返回智能指针, 该智能指针和之前管理这片内存的智能指针共享引用次数。 12345void CSession::Start()&#123; memset(_data, 0, MAX_LENGTH); _socket.async_read_some(boost::asio::buffer(_data, MAX_LENGTH), std::bind(&amp;CSession::HandleRead, this, std::placeholders::_1, std::placeholders::_2, shared_from_this()));&#125; 总结我们使用C11中的bind和智能指针模拟了go, js中的闭包功能, 保证在触发回调函数之前Session都是活的。同时还可以避免二次析构 在网络编程中，一个请求处理可能涉及到异步操作，如接收数据、发送响应等。这些操作可能不会立即完成，而是在未来的某个时刻完成。如果会话对象的生命周期只依赖于函数调用栈，那么当函数返回时，会话对象可能会被销毁，导致正在进行的操作失败。通过将会话对象封装在智能指针中，并将其传递给异步回调函数，可以确保会话对象在所有相关操作完成之前不会被销毁。 所以就是通过调用智能指针增加其引用次数, (什么时候智能指针引用次数减一? 函数结束的时候), 直到全部函数退出, 引用次数变为0, 智能指针就自动析构了, 然后Session不再存活?","categories":[],"tags":[]}],"categories":[],"tags":[]}